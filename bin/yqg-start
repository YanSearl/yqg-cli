#!/usr/bin/env node
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var chalk = _interopDefault(require('chalk'));
var fs = require('fs');
var fs__default = _interopDefault(fs);
var expandTilde = _interopDefault(require('expand-tilde'));
var getPackageInfo = _interopDefault(require('package-json'));
var semver = _interopDefault(require('semver'));
var config = _interopDefault(require('config'));
var path = require('path');
var path__default = _interopDefault(path);
var webpack = _interopDefault(require('webpack'));
var ExtractTextPlugin = _interopDefault(require('extract-text-webpack-plugin'));
var HtmlPlugin = _interopDefault(require('html-webpack-plugin'));
var VersionHashPlugin = _interopDefault(require('webpack-version-hash-plugin'));
var _regeneratorRuntime = _interopDefault(require('@babel/runtime/regenerator'));
var fsExtra = require('fs-extra');
var replace = _interopDefault(require('replace'));
var cp = _interopDefault(require('child_process'));
var express = _interopDefault(require('express'));
var historyApiFallback = _interopDefault(require('connect-history-api-fallback'));
var proxy = _interopDefault(require('http-proxy-middleware'));
var opn = _interopDefault(require('opn'));
var webpackDevMiddleware = _interopDefault(require('webpack-dev-middleware'));
var webpackHotMiddleware = _interopDefault(require('webpack-hot-middleware'));

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          Promise.resolve(value).then(_next, _throw);
        }
      }

      function _next(value) {
        step("next", value);
      }

      function _throw(err) {
        step("throw", err);
      }

      _next();
    });
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _iterableToArrayLimit(arr, i) {
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

var name = "@yqg/cli";
var version = "0.1.0-alpha.1";

var DEBUG = !!process.env.DEBUG;
var VERSION_CHECK_DISABLE = !!process.env.NODE_ENV;
var VERSION_CHECK_PERIOD = 86400e3;
var VERSION_FILE_PATH = '~/.yqg-cli.log';
var signature = "yqg-cli@".concat(version);

var colored = function colored(chalkMethod) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return args.map(function (obj) {
    return typeof obj === 'string' ? chalkMethod(obj) : obj;
  });
};
var timeFormat = function timeFormat(time) {
  return time.toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, '$1');
};
var timePrefix = function timePrefix() {
  var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
  return chalk.yellow("[".concat(timeFormat(time), "][").concat(signature, "]"));
};
var timeInfoMap = {};
var logger = {
  info: function info() {
    var _console;
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    (_console = console).log.apply(_console, [timePrefix()].concat(args));
  },
  error: function error() {
    var _console2;
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    (_console2 = console).error.apply(_console2, [timePrefix()].concat(_toConsumableArray(colored.apply(void 0, [chalk.red].concat(args)))));
  },
  success: function success() {
    var _console3;
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    (_console3 = console).error.apply(_console3, [timePrefix()].concat(_toConsumableArray(colored.apply(void 0, [chalk.green].concat(args)))));
  },
  strong: function strong() {
    var _console4;
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }
    (_console4 = console).error.apply(_console4, [timePrefix()].concat(_toConsumableArray(colored.apply(void 0, [chalk.bgGreen].concat(args)))));
  },
  time: function time(tag) {
    if (!tag) throw new Error('Tag can not be empty!');
    timeInfoMap[tag] = {
      timeStarted: Date.now()
    };
    for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
      args[_key6 - 1] = arguments[_key6];
    }
    logger.info.apply(logger, ["Starting '".concat(tag, "' ...")].concat(args));
  },
  timeEnd: function timeEnd(tag) {
    if (!tag) throw new Error('Tag can not be empty!');
    var timeInfo = timeInfoMap[tag];
    if (!timeInfo) throw new Error("logger.time(".concat(tag, ") has not been invoked yet."));
    var millis = Date.now() - timeInfo.timeStarted;
    delete timeInfoMap[tag];
    for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
      args[_key7 - 1] = arguments[_key7];
    }
    logger.info.apply(logger, ["Finished '".concat(tag, "' after ").concat(millis, " ms")].concat(args));
  }
};

var LOG_TAG = 'check-version';
var checkVersion = (function () {
  return new Promise(function (resolve, reject) {
    if (VERSION_CHECK_DISABLE) {
      resolve();
      return;
    }
    var timestamp = 0;
    var filePath = expandTilde(VERSION_FILE_PATH);
    if (fs.existsSync(filePath)) {
      timestamp = +fs.readFileSync(filePath).toString() || 0;
    }
    var now = Date.now();
    if (now - timestamp < VERSION_CHECK_PERIOD) {
      resolve();
      return;
    }
    logger.time(LOG_TAG);
    getPackageInfo(name).then(function (_ref) {
      var latestVersion = _ref.version;
      if (semver.gt(latestVersion, version)) {
        logger.strong("Please run 'npm i -g ".concat(name, "@").concat(latestVersion, "' to update your yqg-cli."));
      } else if (semver.lt(latestVersion, version)) {
        logger.error("npm latest version ".concat(latestVersion, " is less than local version ").concat(version, "."));
      } else {
        logger.success('Congratulations! Your yqg-cli is the latest!');
        fs.writeFileSync(filePath, now);
      }
      logger.timeEnd(LOG_TAG);
      resolve();
    }, reject);
  });
});

/**
 * @author panezhang
 * @date 08/02/2018-13:24
 * @file setup
 */
process.on('uncaughtException', function (err) {
  console.log(); // 换行

  if (DEBUG) {
    console.log('uncaughtException', err);
  } else {
    console.log('异常退出');
  }
});
process.on('unhandledRejection', function (err, promise) {
  console.log(); // 换行

  if (DEBUG) {
    console.log('unhandledRejection', err, promise);
  } else {
    console.log('已退出');
  }
});
var setup = (function () {
  return Promise.all([checkVersion()]);
});

var config$1 = config.get('yqg');

var STAGE = process.env.NODE_ENV || 'dev';
var DEV = !/test|feat|prod/.test(STAGE);
var STAGE_CONF = {
  dev: {
    chidoriHost: 'https://chidori-admin-test.yangqianguan.com'
  },
  test: {
    chidoriHost: 'https://chidori-admin-test.yangqianguan.com'
  },
  feat: {
    chidoriHost: 'https://chidori-admin-feat.yangqianguan.com'
  },
  prod: {
    chidoriHost: 'https://chidori-admin.yangqianguan.com'
  }
};
var _ref = STAGE_CONF[STAGE] || STAGE_CONF.dev,
    CHIDORI_HOST = _ref.chidoriHost;
var buildConf;
var runConf;
try {
  buildConf = config.get('build');
} catch (err) {
  buildConf = {};
}
try {
  runConf = config.get('run');
} catch (err) {
  runConf = {};
}
var _buildConf = buildConf,
    _buildConf$debug = _buildConf.debug,
    DEBUG$1 = _buildConf$debug === void 0 ? DEV : _buildConf$debug,
    _buildConf$verbose = _buildConf.verbose,
    VERBOSE = _buildConf$verbose === void 0 ? DEV : _buildConf$verbose,
    _buildConf$mode = _buildConf.mode,
    MODE = _buildConf$mode === void 0 ? DEV ? 'development' : 'production' : _buildConf$mode,
    _buildConf$framework = _buildConf.framework,
    FRAMEWORK = _buildConf$framework === void 0 ? 'react' : _buildConf$framework,
    _buildConf$hash = _buildConf.hash,
    HASH = _buildConf$hash === void 0 ? DEV ? 'hash' : 'chunkhash' : _buildConf$hash,
    _buildConf$cssHash = _buildConf.cssHash,
    CSS_HASH = _buildConf$cssHash === void 0 ? DEV ? 'hash' : 'contenthash' : _buildConf$cssHash,
    _buildConf$srcMap = _buildConf.srcMap,
    SRC_MAP = _buildConf$srcMap === void 0 ? DEV : _buildConf$srcMap,
    _buildConf$packageJso = _buildConf.packageJsonPath,
    PACKAGE_JSON_PATH = _buildConf$packageJso === void 0 ? 'package.json' : _buildConf$packageJso;
var _runConf = runConf,
    _runConf$apiHost = _runConf.apiHost,
    API_HOST = _runConf$apiHost === void 0 ? '' : _runConf$apiHost,
    _runConf$webHost = _runConf.webHost,
    WEB_HOST = _runConf$webHost === void 0 ? '' : _runConf$webHost,
    _runConf$port = _runConf.port,
    PORT = _runConf$port === void 0 ? 8080 : _runConf$port;

var stats = {
  colors: true,
  reasons: DEBUG$1,
  hash: VERBOSE,
  version: VERBOSE,
  timings: true,
  chunks: VERBOSE,
  chunkModules: VERBOSE,
  cached: VERBOSE,
  cachedAssets: VERBOSE
};

var PWD = process.cwd();
var resolvePwd = function resolvePwd() {
  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    args[_key5] = arguments[_key5];
  }
  return path.resolve.apply(void 0, [PWD].concat(args));
};

var globals = {
  __STAGE__: JSON.stringify(STAGE),
  __DEBUG__: DEBUG$1,
  __API_HOST__: JSON.stringify(API_HOST),
  __WEB_HOST__: JSON.stringify(WEB_HOST),
  __CHIDORI_HOST__: JSON.stringify(CHIDORI_HOST)
};

var rules = [{
  test: /\.jsx?$/,
  loader: 'babel-loader',
  exclude: /node_modules/
}, {
  test: /\.html$/,
  loader: 'html-loader'
}, {
  test: /\.(txt|md)$/,
  loader: 'raw-loader'
}, {
  test: /\.(png|jpg|jpeg|gif|svg|woff|woff2)$/,
  loader: 'url-loader',
  options: {
    limit: 10000
  }
}, {
  test: /\.(tpl|eot|ttf|wav|mp3)$/,
  loader: 'file-loader'
}];

var reactConfig = {
  target: 'web',
  mode: MODE,
  entry: {
    main: './common/app/index.js',
    polyfill: ['es5-shim', 'es5-shim/es5-sham', 'json3', 'babel-polyfill']
  },
  output: {
    publicPath: '/',
    path: resolvePwd('./build/public/'),
    filename: "[name].[".concat(HASH, "].js")
  },
  module: {
    rules: _toConsumableArray(rules).concat(_toConsumableArray(DEBUG$1 ? [{
      test: /\.css$/,
      use: ['style-loader', 'css-loader']
    }, {
      test: /\.scss$/,
      use: ['style-loader', 'css-loader', 'sass-loader']
    }] : [{
      test: /\.css$/,
      loader: ExtractTextPlugin.extract('css-loader')
    }, {
      test: /\.scss$/,
      loader: ExtractTextPlugin.extract(['css-loader', 'sass-loader'])
    }]))
  },
  optimization: {
    runtimeChunk: {
      name: 'manifest'
    },
    splitChunks: {
      maxAsyncRequests: 10,
      maxInitialRequests: 10,
      cacheGroups: {
        polyfill: {
          chunks: 'all',
          test: 'polyfill',
          name: 'polyfill',
          priority: -5
        },
        react: {
          chunks: 'all',
          test: /[\\/]node_modules[\\/](react|redux)/,
          priority: -5
        },
        vendor: {
          chunks: 'all',
          test: /[\\/]node_modules[\\/]/,
          priority: -10
        }
      }
    }
  },
  plugins: [
  new webpack.DefinePlugin(_objectSpread({}, globals, {
    __BROWSER__: true
  })), new VersionHashPlugin(), new webpack.ProvidePlugin({
    React: 'react',
    YqgToast: [resolvePwd('./common/util/yqg-toast'), 'default']
  }), new HtmlPlugin({
    template: resolvePwd('./common/app/index.html'),
    favicon: resolvePwd('./common/app/fav.png')
  })].concat(_toConsumableArray(!DEBUG$1 ? [new ExtractTextPlugin({
    filename: "[name].[".concat(CSS_HASH, "].css"),
    allChunks: true
  }), new webpack.optimize.AggressiveMergingPlugin()] : []))
};

var FRAMEWORK_MAP = {
  react: reactConfig
};
var clientConfig = FRAMEWORK_MAP[FRAMEWORK];

var packageJsonContent = fs__default.readFileSync(resolvePwd(PACKAGE_JSON_PATH)).toString();
var Package = JSON.parse(packageJsonContent);
var serverConfig = {
  target: 'node',
  mode: MODE,
  node: {
    console: false,
    global: false,
    process: false,
    Buffer: false,
    __filename: false,
    __dirname: false
  },
  entry: './server.js',
  output: {
    publicPath: '/',
    path: resolvePwd('./build'),
    filename: 'server.js',
    libraryTarget: 'commonjs2'
  },
  devtool: SRC_MAP ? 'source-map' : false,
  cache: DEBUG$1,
  module: {
    rules: rules
  },
  externals: _toConsumableArray(Object.keys(Package.dependencies)).concat(_toConsumableArray(Object.keys(Package.devDependencies))),
  plugins: [new webpack.DefinePlugin(_objectSpread({}, globals, {
    __BROWSER__: false
  })), new webpack.optimize.OccurrenceOrderPlugin()]
};

var bundle = (function () {
  return new Promise(function (resolve, reject) {
    webpack([clientConfig, serverConfig]).run(function (err, stats$$1) {
      if (err) {
        return reject(err);
      }
      console.log(stats$$1.toString(stats));
      return resolve(stats$$1);
    });
  });
});

var DEFAULT_OPTIONS = {
  remove: 'build',
  recreate: true,
  ensure: 'build'
};
var clean = (function () {
  var _ref = _asyncToGenerator(
  _regeneratorRuntime.mark(function _callee(opts) {
    var _Object$assign, optsRemove, recreate, optsEnsure, removeTargets, ensureTargets, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _target2, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _target3;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _Object$assign = Object.assign({}, DEFAULT_OPTIONS, opts), optsRemove = _Object$assign.remove, recreate = _Object$assign.recreate, optsEnsure = _Object$assign.ensure;
            removeTargets = typeof optsRemove === 'string' ? [optsRemove] : optsRemove;
            ensureTargets = recreate ? _toConsumableArray(removeTargets) : [];
            if (optsEnsure) {
              typeof optsEnsure === 'string' ? ensureTargets.push(optsEnsure) : ensureTargets.push.apply(ensureTargets, _toConsumableArray(optsEnsure));
            }
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 7;
            _iterator = removeTargets[Symbol.iterator]();
          case 9:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context.next = 16;
              break;
            }
            _target2 = _step.value;
            _context.next = 13;
            return fsExtra.remove(_target2);
          case 13:
            _iteratorNormalCompletion = true;
            _context.next = 9;
            break;
          case 16:
            _context.next = 22;
            break;
          case 18:
            _context.prev = 18;
            _context.t0 = _context["catch"](7);
            _didIteratorError = true;
            _iteratorError = _context.t0;
          case 22:
            _context.prev = 22;
            _context.prev = 23;
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          case 25:
            _context.prev = 25;
            if (!_didIteratorError) {
              _context.next = 28;
              break;
            }
            throw _iteratorError;
          case 28:
            return _context.finish(25);
          case 29:
            return _context.finish(22);
          case 30:
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context.prev = 33;
            _iterator2 = ensureTargets[Symbol.iterator]();
          case 35:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              _context.next = 42;
              break;
            }
            _target3 = _step2.value;
            _context.next = 39;
            return fsExtra.ensureDir(_target3);
          case 39:
            _iteratorNormalCompletion2 = true;
            _context.next = 35;
            break;
          case 42:
            _context.next = 48;
            break;
          case 44:
            _context.prev = 44;
            _context.t1 = _context["catch"](33);
            _didIteratorError2 = true;
            _iteratorError2 = _context.t1;
          case 48:
            _context.prev = 48;
            _context.prev = 49;
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          case 51:
            _context.prev = 51;
            if (!_didIteratorError2) {
              _context.next = 54;
              break;
            }
            throw _iteratorError2;
          case 54:
            return _context.finish(51);
          case 55:
            return _context.finish(48);
          case 56:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[7, 18, 22, 30], [23,, 25, 29], [33, 44, 48, 56], [49,, 51, 55]]);
  }));
  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();

var DEFAULT_OPTIONS$1 = {
  paths: _defineProperty({
    config: 'build/config',
    static: 'build/static'
  }, PACKAGE_JSON_PATH, 'build/package.json'),
  exclude: null,
  replace: true
};
var copy = _asyncToGenerator(
_regeneratorRuntime.mark(function _callee() {
  var opts,
      paths,
      _Object$assign,
      replaceScripts,
      srcArr,
      _i,
      src,
      _args = arguments;
  return _regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          opts = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
          paths = Object.assign({}, DEFAULT_OPTIONS$1.paths, opts.paths);
          _Object$assign = Object.assign({}, DEFAULT_OPTIONS$1, opts), replaceScripts = _Object$assign.replace;
          srcArr = Object.keys(paths);
          _i = 0;
        case 5:
          if (!(_i < srcArr.length)) {
            _context.next = 12;
            break;
          }
          src = srcArr[_i];
          _context.next = 9;
          return fsExtra.copy(src, paths[src]);
        case 9:
          _i++;
          _context.next = 5;
          break;
        case 12:
          if (replaceScripts) {
            replace({
              regex: '"scripts": {(.|\n)*?}',
              replacement: '"scripts": {\n    "start": "node server.js"\n  }',
              paths: [paths['package.json']],
              recursive: false,
              silent: false
            });
          }
        case 13:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
}));

var server;
function killServer() {
  if (server) {
    server.kill('SIGTERM');
  }
}
function runServer(serverPath) {
  return new Promise(function (resolve) {
    killServer();
    server = cp.fork(serverPath, {
      env: Object.assign({
        NODE_ENV: 'development'
      }, process.env),
      silent: false
    });
    server.on('message', function () {
      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return result.ready && resolve();
    });
  });
}
process.on('exit', killServer);

var DEV_PORT = PORT + 1;
var FALLBACK_URL_PREFIX_LIST = [
'/admin', '/ws', '/print', '/api-web'];
var isApiUrl = function isApiUrl(url) {
  return FALLBACK_URL_PREFIX_LIST.some(function (prefix) {
    return url.startsWith(prefix);
  });
};
var createCompilationPromise = function createCompilationPromise(name, compiler) {
  return new Promise(function (resolve, reject) {
    var TAG = "Compiling '".concat(name, "'");
    compiler.plugin('compile', function () {
      return logger.time(TAG);
    });
    compiler.plugin('done', function (result) {
      console.info(result.toString(stats));
      if (result.hasErrors()) {
        logger.timeEnd(TAG, 'Failed!');
        reject(new Error('Compilation failed!'));
      } else {
        logger.timeEnd(TAG, 'Succeed!');
        resolve(result);
      }
    });
  });
};
function launchServer(_x) {
  return _launchServer.apply(this, arguments);
}
function _launchServer() {
  _launchServer = _asyncToGenerator(
  _regeneratorRuntime.mark(function _callee(server) {
    var TAG;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            TAG = 'launch server';
            logger.time(TAG);
            _context.next = 4;
            return new Promise(function (resolve) {
              return server.listen(DEV_PORT, resolve);
            });
          case 4:
            logger.info("The dev server is running at http://local.yangqianguan.com:".concat(DEV_PORT, "/"));
            opn("http://local.yangqianguan.com:".concat(DEV_PORT, "/"));
            logger.timeEnd(TAG);
          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _launchServer.apply(this, arguments);
}
function start() {
  return _start.apply(this, arguments);
}
function _start() {
  _start = _asyncToGenerator(
  _regeneratorRuntime.mark(function _callee3() {
    var clientWebpackHMREntry, bundler, _bundler$compilers, clientCompiler, serverCompiler, clientPromise, serverPromise, hotMiddleware, devMiddleware, proxyMiddleware, fallbackMiddleware, runServerPromise, runServerPromiseResolve, runServerPromiseIsResolved, devServer, run, _run;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _run = function _ref2() {
              _run = _asyncToGenerator(
              _regeneratorRuntime.mark(function _callee2() {
                var _serverConfig$output, filePath, filename, serverPath;
                return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _serverConfig$output = serverConfig.output, filePath = _serverConfig$output.path, filename = _serverConfig$output.filename;
                        serverPath = path__default.join(filePath, filename);
                        _context2.next = 4;
                        return runServer(serverPath);
                      case 4:
                        runServerPromiseIsResolved = true;
                        runServerPromiseResolve();
                      case 6:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2, this);
              }));
              return _run.apply(this, arguments);
            };
            run = function _ref() {
              return _run.apply(this, arguments);
            };
            clientWebpackHMREntry = 'webpack-hot-middleware/client?reload=true';
            clientConfig.entry = _objectSpread({}, clientConfig.entry, {
              main: [clientWebpackHMREntry, clientConfig.entry.main]
            });
            clientConfig.plugins.push(new webpack.HotModuleReplacementPlugin(), new webpack.NoEmitOnErrorsPlugin(), new webpack.NamedModulesPlugin());
            bundler = webpack([clientConfig, serverConfig]);
            _bundler$compilers = _slicedToArray(bundler.compilers, 2), clientCompiler = _bundler$compilers[0], serverCompiler = _bundler$compilers[1];
            clientPromise = createCompilationPromise('client', clientCompiler);
            serverPromise = createCompilationPromise('server', serverCompiler);
            hotMiddleware = webpackHotMiddleware(clientCompiler);
            devMiddleware = webpackDevMiddleware(clientCompiler, {
              publicPath: clientConfig.output.publicPath,
              stats: stats
            });
            proxyMiddleware = proxy({
              target: "http://localhost:".concat(PORT),
              ws: true
            });
            fallbackMiddleware = historyApiFallback({
              verbose: true
            });
            runServerPromiseIsResolved = true;
            devServer = express();
            devServer.use(function (req, res, next) {
              var publicPath = clientConfig.output.path;
              if (req.url && (isApiUrl(req.url) || fs__default.existsSync(publicPath + req.url))) {
                logger.info(req.method, req.originalUrl);
                runServerPromise.then(function () {
                  return proxyMiddleware(req, res, next);
                }).catch(logger.error);
                return;
              }
              next();
            });
            devServer.use(fallbackMiddleware);
            devServer.use(devMiddleware);
            devServer.use(hotMiddleware);
            devServer.on('upgrade', proxyMiddleware.upgrade);
            serverCompiler.plugin('compile', function () {
              if (!runServerPromiseIsResolved) return;
              runServerPromiseIsResolved = false;
              runServerPromise = new Promise(function (resolve) {
                return runServerPromiseResolve = resolve;
              });
            });
            serverCompiler.watch({}, function (error, result) {
              if (!error && !result.hasErrors()) {
                run().catch(logger.error);
              }
            });
            _context3.next = 24;
            return clientPromise;
          case 24:
            _context3.next = 26;
            return serverPromise;
          case 26:
            _context3.next = 28;
            return launchServer(devServer);
          case 28:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _start.apply(this, arguments);
}

var scripts$1 = {
  bundle: bundle,
  clean: clean,
  copy: copy,
  start: start
};
var run = (function () {
  var _ref = _asyncToGenerator(
  _regeneratorRuntime.mark(function _callee(name, cmdOpts) {
    var script, opts;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            script = scripts$1[name];
            if (script) {
              _context.next = 4;
              break;
            }
            logger.error("script '".concat(name, "' not found."));
            return _context.abrupt("return");
          case 4:
            logger.time(name);
            opts = Object.assign({}, config$1[name], cmdOpts);
            _context.next = 8;
            return script.default ? script.default(opts) : script(opts);
          case 8:
            logger.timeEnd(name);
          case 9:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

_asyncToGenerator(
/*#__PURE__*/
_regeneratorRuntime.mark(function _callee() {
  return _regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return setup();

        case 2:
          _context.next = 4;
          return run('clean');

        case 4:
          _context.next = 6;
          return run('copy');

        case 6:
          _context.next = 8;
          return run('start');

        case 8:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
}))();
