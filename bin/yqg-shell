#!/usr/bin/env node
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var path = require('path');
var minimist = _interopDefault(require('minimist'));
var chalk = _interopDefault(require('chalk'));
var prompt = _interopDefault(require('prompt'));
var prefix = _interopDefault(require('global-prefix'));
var fs = require('fs');
var expandTilde = _interopDefault(require('expand-tilde'));
var getPackageInfo = _interopDefault(require('package-json'));
var semver = _interopDefault(require('semver'));
var child_process = require('child_process');
require('@babel/polyfill');
var commander = _interopDefault(require('commander'));

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var resolveYqgResource = function resolveYqgResource() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return path.resolve.apply(void 0, [__dirname, './yqg-resource'].concat(args));
};
var resolveYqgShell = function resolveYqgShell() {
  for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
    args[_key3] = arguments[_key3];
  }
  return resolveYqgResource.apply(void 0, ['./shell'].concat(args));
};
var PWD = process.cwd();

var name = "@yqg/cli";
var version = "0.1.9";

var argv = minimist(process.argv);
var _argv$debug = argv.debug,
    DEBUG = _argv$debug === void 0 ? false : _argv$debug,
    _argv$stat = argv.stat,
    STAT = _argv$stat === void 0 ? false : _argv$stat;
var NODE_ENV = process.env.NODE_ENV;
var VERSION_CHECK_DISABLE = !!process.env.NODE_ENV;
var VERSION_CHECK_PERIOD = 86400e3;
var VERSION_FILE_PATH = '~/.yqg-cli.log';
var signature = "yqg-cli@".concat(version);

prompt.message = chalk.yellow(signature);
var prompt$1 = (function (properties) {
  return new Promise(function (resolve, reject) {
    prompt.start();
    prompt.get({
      properties: properties
    }, function (err, ret) {
      return err ? reject(err) : resolve(ret);
    });
  });
});

var NPM_PREFIX = prefix;
var isGlobalInstall = function isGlobalInstall() {
  return process.argv.some(function (arg, index) {
    return !index && arg.startsWith('yqg') || arg.startsWith(NPM_PREFIX) && !arg.endsWith('node');
  });
};
var IS_GLOBAL_INSTALL = isGlobalInstall();

var colored = function colored(chalkMethod) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return args.map(function (obj) {
    return typeof obj === 'string' ? chalkMethod(obj) : obj;
  });
};
var timeFormat = function timeFormat(time) {
  return time.toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, '$1');
};
var timePrefix = function timePrefix() {
  var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
  return chalk.yellow("[".concat(timeFormat(time), "][").concat(signature, "]"));
};
var timeInfoMap = {};
var logger = {
  info: function info() {
    var _console;
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    (_console = console).log.apply(_console, [timePrefix()].concat(args));
  },
  error: function error() {
    var _console2;
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    (_console2 = console).error.apply(_console2, [timePrefix()].concat(_toConsumableArray(colored.apply(void 0, [chalk.red].concat(args)))));
  },
  success: function success() {
    var _console3;
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    (_console3 = console).error.apply(_console3, [timePrefix()].concat(_toConsumableArray(colored.apply(void 0, [chalk.green].concat(args)))));
  },
  strong: function strong() {
    var _console4;
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }
    (_console4 = console).error.apply(_console4, [timePrefix()].concat(_toConsumableArray(colored.apply(void 0, [chalk.bgGreen].concat(args)))));
  },
  time: function time(tag) {
    if (!tag) throw new Error('Tag can not be empty!');
    timeInfoMap[tag] = {
      timeStarted: Date.now()
    };
    for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
      args[_key6 - 1] = arguments[_key6];
    }
    logger.info.apply(logger, ["Starting '".concat(tag, "' ...")].concat(args));
  },
  timeEnd: function timeEnd(tag) {
    if (!tag) throw new Error('Tag can not be empty!');
    var timeInfo = timeInfoMap[tag];
    if (!timeInfo) throw new Error("logger.time(".concat(tag, ") has not been invoked yet."));
    var millis = Date.now() - timeInfo.timeStarted;
    delete timeInfoMap[tag];
    for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
      args[_key7 - 1] = arguments[_key7];
    }
    logger.info.apply(logger, ["Finished '".concat(tag, "' after ").concat(millis, " ms")].concat(args));
  }
};

var LOG_TAG = 'check-version';
var checkVersion = (function () {
  return new Promise(function (resolve, reject) {
    logger.info("DEBUG=".concat(DEBUG, " STAT=").concat(STAT, " NODE_ENV=").concat(NODE_ENV, " prefix=").concat(NPM_PREFIX, " isGlobal=").concat(IS_GLOBAL_INSTALL));
    if (VERSION_CHECK_DISABLE || !IS_GLOBAL_INSTALL) {
      resolve();
      return;
    }
    var lastTimeUpdated = 0;
    var filePath = expandTilde(VERSION_FILE_PATH);
    if (fs.existsSync(filePath)) {
      lastTimeUpdated = +fs.readFileSync(filePath).toString() || 0;
    }
    var now = Date.now();
    if (now - lastTimeUpdated < VERSION_CHECK_PERIOD) {
      resolve();
      return;
    }
    logger.time(LOG_TAG);
    getPackageInfo(name).then(function (_ref) {
      var latestVersion = _ref.version;
      if (semver.gt(latestVersion, version)) {
        logger.strong("Please run 'npm i -g ".concat(name, "@").concat(latestVersion, "' to update your yqg-cli."));
      } else if (semver.lt(latestVersion, version)) {
        logger.error("npm latest version ".concat(latestVersion, " is less than local version ").concat(version, "."));
      } else {
        logger.success('Congratulations! Your yqg-cli is the latest!');
        fs.writeFileSync(filePath, now);
      }
      logger.timeEnd(LOG_TAG);
      resolve();
    }, reject);
  });
});

/**
 * @author panezhang
 * @date 08/02/2018-13:24
 * @file setup
 */
process.on('uncaughtException', function (err) {
  console.log(); // 换行

  if (DEBUG) {
    console.log('uncaughtException', err);
  } else {
    console.log('异常退出');
  }

  process.exit(1);
});
process.on('unhandledRejection', function (err, promise) {
  console.log(); // 换行

  if (DEBUG) {
    console.log('unhandledRejection', err, promise);
  } else {
    console.log('已退出');
  }

  process.exit(1);
});
var setup = (function () {
  return Promise.all([checkVersion()]);
});

var scripts$1 = [{
  filename: 'git-clean-local-branch.sh',
  desc: '清理本地的 release 分支'
}, {
  filename: 'git-clean-remote-branch.sh',
  desc: '清理远程的 release 分支'
}, {
  filename: 'check-package-json.sh',
  desc: '检查 package.json 是否变化'
}];
var scriptNameMap = scripts$1.reduce(function (acc, item) {
  acc[item.filename] = item;
  return acc;
}, {});

function execWithArgs(shell) {
  if (!shell) {
    console.log('请指定要执行的脚本名称');
    return;
  }

  var script = scriptNameMap[shell];

  if (!script) {
    console.log("\u672A\u627E\u5230 ".concat(shell, "\uFF0C\u8BF7\u68C0\u67E5\u62FC\u5199\u662F\u5426\u6B63\u786E"));
    return;
  }

  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    params[_key - 1] = arguments[_key];
  }

  child_process.execFileSync(resolveYqgShell(script.filename), params, {
    stdio: 'inherit'
  });
}

function execWithoutArgs() {
  var hintText = scripts$1.map(function (script, idx) {
    return "".concat(chalk.yellow(idx + 1), ". ").concat(chalk.green(script.filename), " ").concat(script.desc);
  }).join('\n');
  console.log("\u8BF7\u9009\u62E9\u8981\u6267\u884C\u7684\u811A\u672C\uFF1A\n".concat(hintText, "\n"));
  var properties = {
    no: {
      pattern: /^\d+$/,
      description: '输入一个序号',
      message: '只能输入数字',
      required: true
    }
  };
  prompt$1(properties).then(function (result) {
    var script = scripts$1[result.no - 1];

    if (!script) {
      console.error("\u5E8F\u53F7\u4E3A ".concat(result.no, " \u7684\u811A\u672C\u4E0D\u5B58\u5728\uFF01"));
      return;
    }

    child_process.execFileSync(resolveYqgShell(script.filename), {
      stdio: 'inherit'
    });
  });
}

setup().then(function () {
  commander.usage('[shell [...params]]').parse(process.argv);

  if (commander.args.length) {
    // 传递了 shell 参数，检查是否正确
    execWithArgs.apply(void 0, _toConsumableArray(commander.args));
  } else {
    execWithoutArgs();
  }
});
