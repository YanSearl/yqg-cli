#!/usr/bin/env node
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var minimist = _interopDefault(require('minimist'));
var prefix = _interopDefault(require('global-prefix'));
var chalk = _interopDefault(require('chalk'));
var fs = require('fs');
var fs__default = _interopDefault(fs);
var expandTilde = _interopDefault(require('expand-tilde'));
var getPackageInfo = _interopDefault(require('package-json'));
var semver = _interopDefault(require('semver'));
var path = require('path');
var path__default = _interopDefault(path);
var config = _interopDefault(require('config'));
var webpack = _interopDefault(require('webpack'));
var FriendlyErrorsPlugin = _interopDefault(require('friendly-errors-webpack-plugin'));
var MiniCssExtractPlugin = _interopDefault(require('mini-css-extract-plugin'));
var merge = _interopDefault(require('webpack-merge'));
var HtmlPlugin = _interopDefault(require('html-webpack-plugin'));
var VersionHashPlugin = _interopDefault(require('webpack-version-hash-plugin'));
var Visualizer = _interopDefault(require('webpack-visualizer-plugin'));
var UglifyJsPlugin = _interopDefault(require('uglifyjs-webpack-plugin'));
var OptimizeCSSAssetsPlugin = _interopDefault(require('optimize-css-assets-webpack-plugin'));
var nodeExternals = _interopDefault(require('webpack-node-externals'));
var VueSSRClientPlugin = _interopDefault(require('vue-server-renderer/client-plugin'));
var VueSSRServerPlugin = _interopDefault(require('vue-server-renderer/server-plugin'));
var _regeneratorRuntime = _interopDefault(require('@babel/runtime/regenerator'));
var fsExtra = require('fs-extra');
var replace = _interopDefault(require('replace'));
var cp = _interopDefault(require('child_process'));
var express = _interopDefault(require('express'));
var historyApiFallback = _interopDefault(require('connect-history-api-fallback'));
var proxy = _interopDefault(require('http-proxy-middleware'));
var opn = _interopDefault(require('opn'));
var webpackDevMiddleware = _interopDefault(require('webpack-dev-middleware'));
var webpackHotMiddleware = _interopDefault(require('webpack-hot-middleware'));

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          Promise.resolve(value).then(_next, _throw);
        }
      }

      function _next(value) {
        step("next", value);
      }

      function _throw(err) {
        step("throw", err);
      }

      _next();
    });
  };
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var name = "@yqg/cli";
var version = "0.1.9";

var argv = minimist(process.argv);
var _argv$debug = argv.debug,
    DEBUG = _argv$debug === void 0 ? false : _argv$debug,
    _argv$stat = argv.stat,
    STAT = _argv$stat === void 0 ? false : _argv$stat;
var NODE_ENV = process.env.NODE_ENV;
var VERSION_CHECK_DISABLE = !!process.env.NODE_ENV;
var VERSION_CHECK_PERIOD = 86400e3;
var VERSION_FILE_PATH = '~/.yqg-cli.log';
var signature = "yqg-cli@".concat(version);
var FRAMEWORK_TYPE = {
  ANGULAR: 'angular',
  REACT: 'react',
  VUE: 'vue',
  VUE_SSR: 'vue-ssr',
  NONE: 'none'
};

var NPM_PREFIX = prefix;
var isGlobalInstall = function isGlobalInstall() {
  return process.argv.some(function (arg, index) {
    return !index && arg.startsWith('yqg') || arg.startsWith(NPM_PREFIX) && !arg.endsWith('node');
  });
};
var IS_GLOBAL_INSTALL = isGlobalInstall();

var colored = function colored(chalkMethod) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return args.map(function (obj) {
    return typeof obj === 'string' ? chalkMethod(obj) : obj;
  });
};
var timeFormat = function timeFormat(time) {
  return time.toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, '$1');
};
var timePrefix = function timePrefix() {
  var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
  return chalk.yellow("[".concat(timeFormat(time), "][").concat(signature, "]"));
};
var timeInfoMap = {};
var logger = {
  info: function info() {
    var _console;
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    (_console = console).log.apply(_console, [timePrefix()].concat(args));
  },
  error: function error() {
    var _console2;
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    (_console2 = console).error.apply(_console2, [timePrefix()].concat(_toConsumableArray(colored.apply(void 0, [chalk.red].concat(args)))));
  },
  success: function success() {
    var _console3;
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    (_console3 = console).error.apply(_console3, [timePrefix()].concat(_toConsumableArray(colored.apply(void 0, [chalk.green].concat(args)))));
  },
  strong: function strong() {
    var _console4;
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }
    (_console4 = console).error.apply(_console4, [timePrefix()].concat(_toConsumableArray(colored.apply(void 0, [chalk.bgGreen].concat(args)))));
  },
  time: function time(tag) {
    if (!tag) throw new Error('Tag can not be empty!');
    timeInfoMap[tag] = {
      timeStarted: Date.now()
    };
    for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
      args[_key6 - 1] = arguments[_key6];
    }
    logger.info.apply(logger, ["Starting '".concat(tag, "' ...")].concat(args));
  },
  timeEnd: function timeEnd(tag) {
    if (!tag) throw new Error('Tag can not be empty!');
    var timeInfo = timeInfoMap[tag];
    if (!timeInfo) throw new Error("logger.time(".concat(tag, ") has not been invoked yet."));
    var millis = Date.now() - timeInfo.timeStarted;
    delete timeInfoMap[tag];
    for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
      args[_key7 - 1] = arguments[_key7];
    }
    logger.info.apply(logger, ["Finished '".concat(tag, "' after ").concat(millis, " ms")].concat(args));
  }
};

var LOG_TAG = 'check-version';
var checkVersion = (function () {
  return new Promise(function (resolve, reject) {
    logger.info("DEBUG=".concat(DEBUG, " STAT=").concat(STAT, " NODE_ENV=").concat(NODE_ENV, " prefix=").concat(NPM_PREFIX, " isGlobal=").concat(IS_GLOBAL_INSTALL));
    if (VERSION_CHECK_DISABLE || !IS_GLOBAL_INSTALL) {
      resolve();
      return;
    }
    var lastTimeUpdated = 0;
    var filePath = expandTilde(VERSION_FILE_PATH);
    if (fs.existsSync(filePath)) {
      lastTimeUpdated = +fs.readFileSync(filePath).toString() || 0;
    }
    var now = Date.now();
    if (now - lastTimeUpdated < VERSION_CHECK_PERIOD) {
      resolve();
      return;
    }
    logger.time(LOG_TAG);
    getPackageInfo(name).then(function (_ref) {
      var latestVersion = _ref.version;
      if (semver.gt(latestVersion, version)) {
        logger.strong("Please run 'npm i -g ".concat(name, "@").concat(latestVersion, "' to update your yqg-cli."));
      } else if (semver.lt(latestVersion, version)) {
        logger.error("npm latest version ".concat(latestVersion, " is less than local version ").concat(version, "."));
      } else {
        logger.success('Congratulations! Your yqg-cli is the latest!');
        fs.writeFileSync(filePath, now);
      }
      logger.timeEnd(LOG_TAG);
      resolve();
    }, reject);
  });
});

/**
 * @author panezhang
 * @date 08/02/2018-13:24
 * @file setup
 */
process.on('uncaughtException', function (err) {
  console.log(); // 换行

  if (DEBUG) {
    console.log('uncaughtException', err);
  } else {
    console.log('异常退出');
  }

  process.exit(1);
});
process.on('unhandledRejection', function (err, promise) {
  console.log(); // 换行

  if (DEBUG) {
    console.log('unhandledRejection', err, promise);
  } else {
    console.log('已退出');
  }

  process.exit(1);
});
var setup = (function () {
  return Promise.all([checkVersion()]);
});

var PWD = process.cwd();
var resolvePwd = function resolvePwd() {
  for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
    args[_key5] = arguments[_key5];
  }
  return path.resolve.apply(void 0, [PWD].concat(args));
};
var resolvePropertyPath = function resolvePropertyPath(obj) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref$dir = _ref.dir,
      dir = _ref$dir === void 0 ? PWD : _ref$dir,
      _ref$properties = _ref.properties,
      properties = _ref$properties === void 0 ? Object.keys(obj) : _ref$properties,
      _ref$array = _ref.array,
      array = _ref$array === void 0 ? false : _ref$array,
      _ref$deep = _ref.deep,
      deep = _ref$deep === void 0 ? false : _ref$deep;
  var resultObj = _objectSpread({}, obj);
  var resolveAbsPath = function resolveAbsPath() {
    var path$$1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    if (path$$1.startsWith('./') || path$$1.startsWith('../')) {
      return path.resolve(dir, path$$1);
    }
    return path$$1;
  };
  properties.forEach(function (property) {
    var propertyValue = obj[property];
    if (typeof propertyValue === 'string') {
      resultObj[property] = resolveAbsPath(propertyValue);
    } else if (array && Array.isArray(propertyValue)) {
      resultObj[property] = propertyValue.map(resolveAbsPath);
    } else if (deep && _typeof(propertyValue) === 'object') {
      resultObj[property] = resolvePropertyPath(propertyValue, {
        dir: dir,
        properties: properties,
        array: array,
        deep: deep
      });
    }
  });
  return resultObj;
};

var _FRAMEWORK_CONF;
var STAGE = process.env.NODE_ENV || 'dev';
var DEV = !/test|feat|prod/.test(STAGE);
var STAGE_CONF = {
  dev: {
    chidoriApiHost: 'https://chidori-api-test.yangqianguan.com',
    chidoriHost: 'https://chidori-admin-test.yangqianguan.com'
  },
  test: {
    chidoriApiHost: 'https://chidori-api-test.yangqianguan.com',
    chidoriHost: 'https://chidori-admin-test.yangqianguan.com'
  },
  feat: {
    chidoriApiHost: 'https://chidori-api-feat.yangqianguan.com',
    chidoriHost: 'https://chidori-admin-feat.yangqianguan.com'
  },
  prod: {
    chidoriApiHost: 'https://chidori-api-admin.yangqianguan.com',
    chidoriHost: 'https://chidori-admin.yangqianguan.com'
  }
};
Object.assign(STAGE_CONF, {
  'aws-test': STAGE_CONF.test,
  'aws-feat': STAGE_CONF.feat,
  'aws-prod': STAGE_CONF.prod
});
var _ref = STAGE_CONF[STAGE] || STAGE_CONF.dev,
    CHIDORI_API_HOST = _ref.chidoriApiHost,
    CHIDORI_HOST = _ref.chidoriHost;
var buildConf;
var runConf;
try {
  buildConf = config.get('build');
} catch (err) {
  buildConf = {};
}
try {
  runConf = config.get('run');
} catch (err) {
  runConf = {};
}
var _buildConf = buildConf,
    _buildConf$debug = _buildConf.debug,
    DEBUG$1 = _buildConf$debug === void 0 ? DEV : _buildConf$debug,
    _buildConf$vueDebug = _buildConf.vueDebug,
    VUE_DEBUG = _buildConf$vueDebug === void 0 ? DEV : _buildConf$vueDebug,
    _buildConf$verbose = _buildConf.verbose,
    VERBOSE = _buildConf$verbose === void 0 ? DEV : _buildConf$verbose,
    _buildConf$mode = _buildConf.mode,
    MODE = _buildConf$mode === void 0 ? DEV ? 'development' : 'production' : _buildConf$mode,
    _buildConf$framework = _buildConf.framework,
    FRAMEWORK = _buildConf$framework === void 0 ? 'react' : _buildConf$framework,
    _buildConf$hash = _buildConf.hash,
    HASH = _buildConf$hash === void 0 ? DEV ? 'hash' : 'chunkhash' : _buildConf$hash,
    _buildConf$cssHash = _buildConf.cssHash,
    CSS_HASH = _buildConf$cssHash === void 0 ? DEV ? 'hash' : 'contenthash' : _buildConf$cssHash,
    _buildConf$srcMap = _buildConf.srcMap,
    SRC_MAP = _buildConf$srcMap === void 0 ? DEV : _buildConf$srcMap,
    _buildConf$packageJso = _buildConf.packageJsonPath,
    PACKAGE_JSON_PATH = _buildConf$packageJso === void 0 ? 'package.json' : _buildConf$packageJso,
    _buildConf$publicPath = _buildConf.publicPath,
    PUBLIC_PATH = _buildConf$publicPath === void 0 ? '/' : _buildConf$publicPath,
    _buildConf$alias = _buildConf.alias,
    _WEBPACK_ALIAS = _buildConf$alias === void 0 ? {} : _buildConf$alias,
    _buildConf$global = _buildConf.global,
    WEBPACK_GLOBALS = _buildConf$global === void 0 ? {} : _buildConf$global,
    _buildConf$serverEntr = _buildConf.serverEntry,
    WEBPACK_SERVER_ENTRY = _buildConf$serverEntr === void 0 ? './server.js' : _buildConf$serverEntr,
    _buildConf$ssrServerE = _buildConf.ssrServerEntry,
    WEBPACK_SSR_SERVER_ENTRY = _buildConf$ssrServerE === void 0 ? './server.js' : _buildConf$ssrServerE,
    _buildConf$server = _buildConf.server,
    WEBPACK_SERVER_CONF = _buildConf$server === void 0 ? {} : _buildConf$server,
    _buildConf$ssrServer = _buildConf.ssrServer,
    WEBPACK_SSR_SERVER_CONF = _buildConf$ssrServer === void 0 ? {} : _buildConf$ssrServer,
    _buildConf$provide = _buildConf.provide,
    _WEBPACK_PROVIDES = _buildConf$provide === void 0 ? {} : _buildConf$provide,
    _buildConf$htmlPlugin = _buildConf.htmlPlugin,
    WEBPACK_HTML_PLUGIN_CONF = _buildConf$htmlPlugin === void 0 ? {} : _buildConf$htmlPlugin,
    _buildConf$cacheGroup = _buildConf.cacheGroups,
    WEBPACK_CACHE_GROUPS = _buildConf$cacheGroup === void 0 ? {} : _buildConf$cacheGroup,
    _buildConf$clientEntr = _buildConf.clientEntry,
    WEBPACK_CLIENT_ENTRY = _buildConf$clientEntr === void 0 ? './common/app/index.js' : _buildConf$clientEntr,
    _buildConf$client = _buildConf.client,
    WEBPACK_CLIENT_CONF = _buildConf$client === void 0 ? {} : _buildConf$client,
    _buildConf$clean = _buildConf.clean,
    CLEAN_CONF = _buildConf$clean === void 0 ? {} : _buildConf$clean,
    _buildConf$copy = _buildConf.copy,
    COPY_CONF = _buildConf$copy === void 0 ? {} : _buildConf$copy,
    _buildConf$devProxy = _buildConf.devProxy,
    PROXY_URL_LIST = _buildConf$devProxy === void 0 ? [] : _buildConf$devProxy;
var WEBPACK_ALIAS = resolvePropertyPath(_WEBPACK_ALIAS);
var WEBPACK_PROVIDES = resolvePropertyPath(_WEBPACK_PROVIDES, {
  array: true
});
var _runConf = runConf,
    _runConf$apiHost = _runConf.apiHost,
    API_HOST = _runConf$apiHost === void 0 ? '' : _runConf$apiHost,
    _runConf$webHost = _runConf.webHost,
    WEB_HOST = _runConf$webHost === void 0 ? '' : _runConf$webHost,
    _runConf$port = _runConf.port,
    PORT = _runConf$port === void 0 ? 8080 : _runConf$port;
logger.info("FRAMEWORK=".concat(FRAMEWORK, " MODE=").concat(MODE));
var FRAMEWORK_CONF = (_FRAMEWORK_CONF = {}, _defineProperty(_FRAMEWORK_CONF, FRAMEWORK_TYPE.VUE_SSR, {
  styleLoader: 'vue-style-loader',
  devProxy: ['/__webpack_hmr']
}), _defineProperty(_FRAMEWORK_CONF, FRAMEWORK_TYPE.VUE, {
  styleLoader: 'vue-style-loader'
}), _FRAMEWORK_CONF);
var _ref2 = FRAMEWORK_CONF[FRAMEWORK] || {},
    _ref2$styleLoader = _ref2.styleLoader,
    STYLE_LOADER = _ref2$styleLoader === void 0 ? 'style-loader' : _ref2$styleLoader,
    _ref2$devProxy = _ref2.devProxy,
    FRAMEWORK_PROXY_URL_LIST = _ref2$devProxy === void 0 ? [] : _ref2$devProxy;

var stats = {
  colors: DEBUG$1,
  reasons: DEBUG$1,
  hash: VERBOSE,
  version: VERBOSE,
  timings: true,
  chunks: VERBOSE,
  chunkModules: VERBOSE,
  cached: VERBOSE,
  cachedAssets: VERBOSE
};

var globals = {
  __STAGE__: JSON.stringify(STAGE),
  __DEBUG__: DEBUG$1,
  __VUE_DEBUG__: VUE_DEBUG,
  __CDN_HOST__: JSON.stringify(''),
  __API_HOST__: JSON.stringify(API_HOST),
  __WEB_HOST__: JSON.stringify(WEB_HOST),
  __CHIDORI_API_HOST__: JSON.stringify(CHIDORI_API_HOST),
  __CHIDORI_HOST__: JSON.stringify(CHIDORI_HOST)
};

var rules = [{
  test: /\.jsx?$/,
  loader: 'babel-loader',
  exclude: /node_modules/
}, {
  test: /\.vue$/,
  loader: 'vue-loader'
}, {
  test: /\.html$/,
  loader: 'html-loader'
}, {
  test: /\.(txt|md)$/,
  loader: 'raw-loader'
}, {
  test: /\.(png|jpg|jpeg|gif|svg|woff|woff2)$/,
  loader: 'url-loader',
  options: {
    limit: 10000
  }
}, {
  test: /\.(tpl|eot|ttf|wav|mp3)$/,
  loader: 'file-loader'
}];

var baseConf = {
  mode: MODE,
  cache: DEBUG$1,
  module: {
    rules: _toConsumableArray(rules).concat(_toConsumableArray(DEBUG$1 ? [{
      test: /\.css$/,
      use: [STYLE_LOADER, 'css-loader']
    }, {
      test: /\.scss$/,
      use: [STYLE_LOADER, 'css-loader', 'resolve-url-loader', 'sass-loader?sourceMap']
    }, {
      test: /\.less$/,
      use: [STYLE_LOADER, 'css-loader', {
        loader: 'less-loader',
        options: {
          javascriptEnabled: true
        }
      }]
    }] : [{
      test: /\.css$/,
      loader: [MiniCssExtractPlugin.loader, 'css-loader']
    }, {
      test: /\.scss$/,
      loader: [MiniCssExtractPlugin.loader, 'css-loader', 'resolve-url-loader', 'sass-loader?sourceMap']
    }, {
      test: /\.less$/,
      use: [MiniCssExtractPlugin.loader, 'css-loader', {
        loader: 'less-loader',
        options: {
          javascriptEnabled: true
        }
      }]
    }]))
  },
  resolve: {
    alias: WEBPACK_ALIAS,
    extensions: ['.js', '.vue', '.json']
  },
  plugins: [new webpack.DefinePlugin(_objectSpread({}, globals, WEBPACK_GLOBALS))].concat(_toConsumableArray(DEBUG$1 ? [new FriendlyErrorsPlugin()] : [new webpack.optimize.AggressiveMergingPlugin(), new webpack.optimize.OccurrenceOrderPlugin(), new MiniCssExtractPlugin({
    filename: "[name].[".concat(CSS_HASH, "].css")
  })]))
};

var clientBaseConf = {
  target: 'web',
  entry: {
    main: WEBPACK_CLIENT_ENTRY,
    polyfill: ['es5-shim', 'es5-shim/es5-sham', 'json3', 'babel-polyfill']
  },
  output: {
    publicPath: PUBLIC_PATH,
    path: resolvePwd('./build/public/'),
    filename: "[name].[".concat(HASH, "].js"),
    globalObject: 'this'
  },
  devtool: SRC_MAP ? 'cheap-module-eval-source-map' : false,
  optimization: {
    runtimeChunk: {
      name: 'manifest'
    },
    splitChunks: {
      maxAsyncRequests: 12,
      maxInitialRequests: 12,
      cacheGroups: _objectSpread({
        polyfill: {
          chunks: 'all',
          test: 'polyfill',
          name: 'polyfill',
          priority: -5
        },
        vendor: {
          chunks: 'all',
          test: /[\\/]node_modules[\\/]/,
          priority: -10
        }
      }, WEBPACK_CACHE_GROUPS)
    }
  },
  plugins: [new webpack.DefinePlugin({
    __BROWSER__: true
  }), new webpack.ProvidePlugin(WEBPACK_PROVIDES), new HtmlPlugin(WEBPACK_HTML_PLUGIN_CONF), new VersionHashPlugin()].concat(_toConsumableArray(STAT ? [new Visualizer({
    filename: './webpack-stat.html'
  })] : []))
};
var baseConf$1 = merge(baseConf, clientBaseConf);

var rules$1 = baseConf$1.module.rules.filter(function (rule) {
  return rule.loader !== 'babel-loader';
});
rules$1.unshift({
  test: /\.jsx?$/,
  use: [{
    loader: 'ng-annotate-loader',
    options: {
      add: true,
      map: false
    }
  }, {
    loader: 'babel-loader'
  }],
  exclude: /node_modules/
});
var angularBaseConf = _objectSpread({}, baseConf$1, {
  module: _objectSpread({}, baseConf$1.module, {
    rules: rules$1
  })
});
var angularConf = {
  optimization: _objectSpread({
    splitChunks: {
      cacheGroups: {
        angular: {
          chunks: 'all',
          test: /[\\/]node_modules[\\/](angular)/,
          priority: -5
        }
      }
    }
  }, DEBUG$1 ? {} : {
    minimizer: [new UglifyJsPlugin({
      cache: DEBUG$1,
      parallel: true,
      sourceMap: SRC_MAP
    }), new OptimizeCSSAssetsPlugin({})]
  }),
  plugins: [new webpack.ProvidePlugin({
    '$': 'jquery',
    'jQuery': 'jquery',
    'window.jQuery': 'jquery'
  })]
};
var angular = merge(angularBaseConf, angularConf, WEBPACK_CLIENT_CONF);

var reactConf = {
  optimization: {
    splitChunks: {
      cacheGroups: {
        react: {
          chunks: 'all',
          test: /[\\/]node_modules[\\/](react|redux)/,
          priority: -5
        }
      }
    }
  },
  plugins: [new webpack.ProvidePlugin({
    React: 'react'
  })]
};
var react = merge(baseConf$1, reactConf, WEBPACK_CLIENT_CONF);

var vueConf = {
  resolve: {
    alias: {
      vue$: 'vue/dist/vue.common.js'
    }
  },
  optimization: _objectSpread({
    splitChunks: {
      cacheGroups: {
        vue: {
          chunks: 'all',
          test: /[\\/]node_modules[\\/](vue)/,
          priority: -5
        }
      }
    }
  }, DEBUG$1 ? {} : {
    minimizer: [new UglifyJsPlugin({
      cache: DEBUG$1,
      parallel: true,
      sourceMap: SRC_MAP
    }), new OptimizeCSSAssetsPlugin({})]
  })
};
var vue = merge(baseConf$1, vueConf, WEBPACK_CLIENT_CONF);

var externals = nodeExternals({
  whitelist: [/^@yqg\/cli\/dist/, /\.css$/].concat(_toConsumableArray(Object.keys(WEBPACK_ALIAS).map(function (name) {
    return new RegExp("^".concat(name));
  })))
});

var server = _objectSpread({
  target: 'node',
  mode: MODE,
  node: {
    console: false,
    global: false,
    process: false,
    Buffer: false,
    __filename: false,
    __dirname: false
  },
  entry: WEBPACK_SERVER_ENTRY,
  output: {
    path: resolvePwd('./build'),
    filename: 'server.js',
    libraryTarget: 'commonjs2'
  },
  devtool: SRC_MAP ? 'source-map' : false,
  cache: DEBUG$1,
  module: {
    rules: rules
  },
  externals: externals,
  plugins: [new webpack.DefinePlugin(_objectSpread({}, globals, WEBPACK_GLOBALS, {
    __BROWSER__: false
  })), new webpack.optimize.OccurrenceOrderPlugin()]
}, WEBPACK_SERVER_CONF);

var ssrServerConf = {
  target: 'node',
  node: {
    console: false,
    global: false,
    process: false,
    Buffer: false,
    __filename: false,
    __dirname: false
  },
  devtool: '#source-map',
  entry: WEBPACK_SSR_SERVER_ENTRY,
  output: {
    path: resolvePwd('./build'),
    filename: 'server.js',
    libraryTarget: 'commonjs2'
  },
  externals: [/vue-ssr-server-bundle\.json$/, /vue-ssr-client-manifest\.json$/, externals],
  plugins: [new webpack.DefinePlugin({
    'process.env.VUE_ENV': '"server"'
  })]
};
var server$1 = merge(baseConf, ssrServerConf, WEBPACK_SSR_SERVER_CONF);

var server$2 = FRAMEWORK === FRAMEWORK_TYPE.VUE_SSR ? server$1 : server;

var clientConf = {
  target: 'web',
  entry: {
    app: WEBPACK_CLIENT_ENTRY
  },
  output: {
    path: resolvePwd('./build/public/static'),
    publicPath: PUBLIC_PATH,
    filename: "[name].[".concat(HASH, "].js")
  },
  plugins: [new webpack.DefinePlugin({
    'process.env.VUE_ENV': '"client"'
  }), new VueSSRClientPlugin()]
};
var entryClient = merge(baseConf, clientConf, WEBPACK_CLIENT_CONF);

var serverConf = {
  target: 'node',
  devtool: '#source-map',
  entry: WEBPACK_SERVER_ENTRY,
  output: {
    path: resolvePwd('./build'),
    filename: 'entry-server.js',
    libraryTarget: 'commonjs2'
  },
  externals: externals,
  plugins: [new webpack.DefinePlugin({
    'process.env.VUE_ENV': '"server"'
  }), new VueSSRServerPlugin()]
};
var entryServer = merge(baseConf, serverConf, WEBPACK_SERVER_CONF);

var vueSSR = [entryClient, entryServer, server$1];

var _FRAMEWORK_MAP;
var FRAMEWORK_MAP = (_FRAMEWORK_MAP = {}, _defineProperty(_FRAMEWORK_MAP, FRAMEWORK_TYPE.ANGULAR, [angular, server$2]), _defineProperty(_FRAMEWORK_MAP, FRAMEWORK_TYPE.REACT, [react, server$2]), _defineProperty(_FRAMEWORK_MAP, FRAMEWORK_TYPE.VUE, [vue, server$2]), _defineProperty(_FRAMEWORK_MAP, FRAMEWORK_TYPE.VUE_SSR, vueSSR), _defineProperty(_FRAMEWORK_MAP, FRAMEWORK_TYPE.NONE, server$2), _FRAMEWORK_MAP);
var webpackConfig = FRAMEWORK_MAP[FRAMEWORK];

var bundle = (function () {
  return new Promise(function (resolve, reject) {
    if (!webpackConfig) {
      reject(new Error('No config found.'));
      return;
    }
    webpack(webpackConfig).run(function (err, stats$$1) {
      if (err) {
        return reject(err);
      }
      console.log(stats$$1.toString(stats));
      return resolve(stats$$1);
    });
  });
});

var DEFAULT_OPTIONS = {
  remove: 'build',
  recreate: true,
  ensure: 'build'
};
var clean = (function () {
  var _ref = _asyncToGenerator(
  _regeneratorRuntime.mark(function _callee(opts) {
    var _Object$assign, optsRemove, recreate, optsEnsure, removeTargets, ensureTargets, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, target, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _target;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _Object$assign = Object.assign({}, DEFAULT_OPTIONS, CLEAN_CONF, opts), optsRemove = _Object$assign.remove, recreate = _Object$assign.recreate, optsEnsure = _Object$assign.ensure;
            removeTargets = typeof optsRemove === 'string' ? [optsRemove] : optsRemove;
            ensureTargets = recreate ? _toConsumableArray(removeTargets) : [];
            if (optsEnsure) {
              typeof optsEnsure === 'string' ? ensureTargets.push(optsEnsure) : ensureTargets.push.apply(ensureTargets, _toConsumableArray(optsEnsure));
            }
            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 7;
            _iterator = removeTargets[Symbol.iterator]();
          case 9:
            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
              _context.next = 16;
              break;
            }
            target = _step.value;
            _context.next = 13;
            return fsExtra.remove(target);
          case 13:
            _iteratorNormalCompletion = true;
            _context.next = 9;
            break;
          case 16:
            _context.next = 22;
            break;
          case 18:
            _context.prev = 18;
            _context.t0 = _context["catch"](7);
            _didIteratorError = true;
            _iteratorError = _context.t0;
          case 22:
            _context.prev = 22;
            _context.prev = 23;
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          case 25:
            _context.prev = 25;
            if (!_didIteratorError) {
              _context.next = 28;
              break;
            }
            throw _iteratorError;
          case 28:
            return _context.finish(25);
          case 29:
            return _context.finish(22);
          case 30:
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context.prev = 33;
            _iterator2 = ensureTargets[Symbol.iterator]();
          case 35:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              _context.next = 42;
              break;
            }
            _target = _step2.value;
            _context.next = 39;
            return fsExtra.ensureDir(_target);
          case 39:
            _iteratorNormalCompletion2 = true;
            _context.next = 35;
            break;
          case 42:
            _context.next = 48;
            break;
          case 44:
            _context.prev = 44;
            _context.t1 = _context["catch"](33);
            _didIteratorError2 = true;
            _iteratorError2 = _context.t1;
          case 48:
            _context.prev = 48;
            _context.prev = 49;
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          case 51:
            _context.prev = 51;
            if (!_didIteratorError2) {
              _context.next = 54;
              break;
            }
            throw _iteratorError2;
          case 54:
            return _context.finish(51);
          case 55:
            return _context.finish(48);
          case 56:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this, [[7, 18, 22, 30], [23,, 25, 29], [33, 44, 48, 56], [49,, 51, 55]]);
  }));
  return function (_x) {
    return _ref.apply(this, arguments);
  };
})();

var DEFAULT_OPTIONS$1 = {
  paths: _defineProperty({
    config: 'build/config',
    public: 'build/public',
    static: 'build/public/static'
  }, PACKAGE_JSON_PATH, 'build/package.json'),
  exclude: null,
  replace: true
};
var copy = _asyncToGenerator(
_regeneratorRuntime.mark(function _callee() {
  var opts,
      paths,
      _Object$assign,
      replaceScripts,
      srcArr,
      _i,
      src,
      dest,
      _args = arguments;
  return _regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          opts = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
          paths = Object.assign({}, DEFAULT_OPTIONS$1.paths, COPY_CONF.paths, opts.paths);
          _Object$assign = Object.assign({}, DEFAULT_OPTIONS$1, COPY_CONF, opts), replaceScripts = _Object$assign.replace;
          srcArr = Object.keys(paths);
          _i = 0;
        case 5:
          if (!(_i < srcArr.length)) {
            _context.next = 14;
            break;
          }
          src = srcArr[_i];
          if (!fsExtra.existsSync(src)) {
            _context.next = 11;
            break;
          }
          dest = paths[src];
          _context.next = 11;
          return fsExtra.copy(src, dest);
        case 11:
          _i++;
          _context.next = 5;
          break;
        case 14:
          if (replaceScripts) {
            replace({
              regex: '"scripts": {(.|\n)*?}',
              replacement: '"scripts": {\n    "start": "node server.js"\n  }',
              paths: [paths[PACKAGE_JSON_PATH]],
              recursive: false,
              silent: false
            });
          }
        case 15:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
}));

var server$3;
function killServer() {
  if (server$3) {
    server$3.kill('SIGTERM');
  }
}
function runServer(serverPath) {
  return new Promise(function (resolve) {
    killServer();
    server$3 = cp.fork(serverPath, {
      env: Object.assign({
        NODE_ENV: 'development'
      }, process.env),
      silent: false
    });
    server$3.on('message', function () {
      var result = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return result.ready && resolve();
    });
  });
}
process.on('exit', killServer);

var _FRAMEWORK_MAP$1;
var FRAMEWORK_MAP$1 = (_FRAMEWORK_MAP$1 = {}, _defineProperty(_FRAMEWORK_MAP$1, FRAMEWORK_TYPE.ANGULAR, angular), _defineProperty(_FRAMEWORK_MAP$1, FRAMEWORK_TYPE.REACT, react), _defineProperty(_FRAMEWORK_MAP$1, FRAMEWORK_TYPE.VUE, vue), _FRAMEWORK_MAP$1);
var clientConfig = FRAMEWORK_MAP$1[FRAMEWORK];

var DEV_PORT = PORT + 1;
var PROXY_LIST = Array.from(new Set(['/api', '/admin', '/api-web', '/chidori'].concat(_toConsumableArray(PROXY_URL_LIST), _toConsumableArray(FRAMEWORK_PROXY_URL_LIST))));
var isApiUrl = function isApiUrl(url) {
  return PROXY_LIST.some(function (prefix$$1) {
    return url.startsWith(prefix$$1);
  });
};
var createCompilationPromise = function createCompilationPromise(name, compiler) {
  return new Promise(function (resolve, reject) {
    var TAG = "Compiling '".concat(name, "'");
    compiler.plugin('compile', function () {
      return logger.time(TAG);
    });
    compiler.plugin('done', function (result) {
      console.info(result.toString(stats));
      if (result.hasErrors()) {
        logger.timeEnd(TAG, 'Failed!');
        reject(new Error('Compilation failed!'));
      } else {
        logger.timeEnd(TAG, 'Succeed!');
        resolve(result);
      }
    });
  });
};
function launchServer(_x) {
  return _launchServer.apply(this, arguments);
}
function _launchServer() {
  _launchServer = _asyncToGenerator(
  _regeneratorRuntime.mark(function _callee(server) {
    var TAG;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            TAG = 'launch server';
            logger.time(TAG);
            _context.next = 4;
            return new Promise(function (resolve) {
              return server.listen(DEV_PORT, resolve);
            });
          case 4:
            logger.info("The dev server is running at http://local.yangqianguan.com:".concat(DEV_PORT, "/"));
            opn("http://local.yangqianguan.com:".concat(DEV_PORT, "/"));
            logger.timeEnd(TAG);
          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _launchServer.apply(this, arguments);
}
function setupClientBundle(devServer) {
  if (!clientConfig) return Promise.resolve();
  var clientWebpackHMREntry = 'webpack-hot-middleware/client?reload=true';
  clientConfig.entry = _objectSpread({}, clientConfig.entry, {
    main: [clientWebpackHMREntry, clientConfig.entry.main]
  });
  clientConfig.plugins.push(new webpack.HotModuleReplacementPlugin(), new webpack.NoEmitOnErrorsPlugin(), new webpack.NamedModulesPlugin());
  var clientCompiler = webpack(clientConfig);
  var clientPromise = createCompilationPromise('client', clientCompiler);
  var fallbackMiddleware = historyApiFallback({
    verbose: true
  });
  var hotMiddleware = webpackHotMiddleware(clientCompiler);
  var devMiddleware = webpackDevMiddleware(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    stats: stats
  });
  devServer.use(fallbackMiddleware);
  devServer.use(devMiddleware);
  devServer.use(hotMiddleware);
  return clientPromise;
}
function start() {
  return _start.apply(this, arguments);
}
function _start() {
  _start = _asyncToGenerator(
  _regeneratorRuntime.mark(function _callee3() {
    var devServer, proxyMiddleware, runServerPromise, runServerPromiseResolve, runServerPromiseIsResolved, serverCompiler, serverPromise, run, _run;
    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _run = function _ref2() {
              _run = _asyncToGenerator(
              _regeneratorRuntime.mark(function _callee2() {
                var _serverConfig$output, filePath, filename, serverPath;
                return _regeneratorRuntime.wrap(function _callee2$(_context2) {
                  while (1) {
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        _serverConfig$output = server$2.output, filePath = _serverConfig$output.path, filename = _serverConfig$output.filename;
                        serverPath = path__default.join(filePath, filename);
                        _context2.next = 4;
                        return runServer(serverPath);
                      case 4:
                        runServerPromiseIsResolved = true;
                        runServerPromiseResolve();
                      case 6:
                      case "end":
                        return _context2.stop();
                    }
                  }
                }, _callee2, this);
              }));
              return _run.apply(this, arguments);
            };
            run = function _ref() {
              return _run.apply(this, arguments);
            };
            devServer = express();
            proxyMiddleware = proxy({
              target: "http://localhost:".concat(PORT),
              ws: true
            });
            runServerPromiseIsResolved = true;
            devServer.use(function (req, res, next) {
              if (!clientConfig) {
                runServerPromise.then(function () {
                  return proxyMiddleware(req, res, next);
                }).catch(logger.error);
                return;
              }
              var publicPath = clientConfig.output.path;
              if (req.url && req.url.length > 1 && (isApiUrl(req.url) || fs__default.existsSync(publicPath + req.url))) {
                logger.info('fallback', req.method, req.originalUrl);
                runServerPromise.then(function () {
                  return proxyMiddleware(req, res, next);
                }).catch(logger.error);
                return;
              }
              next();
            });
            devServer.on('upgrade', proxyMiddleware.upgrade);
            serverCompiler = webpack(server$2);
            serverPromise = createCompilationPromise('server', serverCompiler);
            serverCompiler.plugin('compile', function () {
              if (!runServerPromiseIsResolved) return;
              runServerPromiseIsResolved = false;
              runServerPromise = new Promise(function (resolve) {
                return runServerPromiseResolve = resolve;
              });
            });
            serverCompiler.watch({}, function (error, result) {
              if (!error && !result.hasErrors()) {
                run().catch(logger.error);
              }
            });
            _context3.next = 13;
            return setupClientBundle(devServer);
          case 13:
            _context3.next = 15;
            return serverPromise;
          case 15:
            _context3.next = 17;
            return launchServer(devServer);
          case 17:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));
  return _start.apply(this, arguments);
}

var scripts$1 = {
  bundle: bundle,
  clean: clean,
  copy: copy,
  start: start
};
var run = (function () {
  var _ref = _asyncToGenerator(
  _regeneratorRuntime.mark(function _callee(name, opts) {
    var script;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            script = scripts$1[name];
            if (script) {
              _context.next = 4;
              break;
            }
            logger.error("script '".concat(name, "' not found."));
            return _context.abrupt("return");
          case 4:
            logger.time(name);
            _context.next = 7;
            return script.default ? script.default(opts) : script(opts);
          case 7:
            logger.timeEnd(name);
          case 8:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

_asyncToGenerator(
/*#__PURE__*/
_regeneratorRuntime.mark(function _callee() {
  return _regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return setup();

        case 2:
          _context.next = 4;
          return run('clean');

        case 4:
          _context.next = 6;
          return run('copy');

        case 6:
          _context.next = 8;
          return run('bundle');

        case 8:
        case "end":
          return _context.stop();
      }
    }
  }, _callee, this);
}))();
