#!/usr/bin/env node
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var minimist = _interopDefault(require('minimist'));
var chalk = _interopDefault(require('chalk'));
var prompt = _interopDefault(require('prompt'));
var path = require('path');
var gulp = _interopDefault(require('gulp'));
var rename = _interopDefault(require('gulp-rename'));
var template = _interopDefault(require('gulp-template'));
var _regeneratorRuntime = _interopDefault(require('@babel/runtime/regenerator'));
var gitUserInfo = _interopDefault(require('git-user-info'));
var strman = require('strman');
var moment = _interopDefault(require('moment'));
var prefix = _interopDefault(require('global-prefix'));
var fs = require('fs');
var expandTilde = _interopDefault(require('expand-tilde'));
var getPackageInfo = _interopDefault(require('package-json'));
var semver = _interopDefault(require('semver'));
require('@babel/polyfill');

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          Promise.resolve(value).then(_next, _throw);
        }
      }

      function _next(value) {
        step("next", value);
      }

      function _throw(err) {
        step("throw", err);
      }

      _next();
    });
  };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      _defineProperty(target, key, source[key]);
    });
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  _setPrototypeOf(subClass.prototype, superClass && superClass.prototype);

  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.getPrototypeOf || function _getPrototypeOf(o) {
    return o.__proto__;
  };

  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null) break;
  }

  return object;
}

function _get(target, property, receiver) {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get;
  } else {
    _get = function _get(target, property, receiver) {
      var base = _superPropBase(target, property);

      if (!base) return;
      var desc = Object.getOwnPropertyDescriptor(base, property);

      if (desc.get) {
        return desc.get.call(receiver);
      }

      return desc.value;
    };
  }

  return _get(target, property, receiver || target);
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var name = "@yqg/cli";
var version = "0.1.5";

var argv = minimist(process.argv);
var _argv$debug = argv.debug,
    DEBUG = _argv$debug === void 0 ? false : _argv$debug,
    _argv$stat = argv.stat,
    STAT = _argv$stat === void 0 ? false : _argv$stat;
var NODE_ENV = process.env.NODE_ENV;
var VERSION_CHECK_DISABLE = !!process.env.NODE_ENV;
var VERSION_CHECK_PERIOD = 86400e3;
var VERSION_FILE_PATH = '~/.yqg-cli.log';
var signature = "yqg-cli@".concat(version);

prompt.message = chalk.yellow(signature);
var prompt$1 = (function (properties) {
  return new Promise(function (resolve, reject) {
    prompt.start();
    prompt.get({
      properties: properties
    }, function (err, ret) {
      return err ? reject(err) : resolve(ret);
    });
  });
});

var _FRAMEWORK_CONF;
var ANGULAR_TEMPLATE_TYPE = {
  COMPONENT: 'component',
  MODAL: 'modal'
};
var VUE_TEMPLATE_TYPE = {
  COMPONENT: 'component-single',
  COMPONENT_SEPARATED: 'component-separated',
  MODAL: 'modal-base-ui',
  MODAL_CL: 'modal-cl',
  MODAL_EC: 'modal-ec',
  MODEL_MUSE: 'modal-muse',
  PROJECT: 'project',
  PROJECT_USER: 'project-user'
};
var FRAMEWORK_TYPE$1 = {
  ANGULAR: 'angular',
  VUE: 'vue'
};
var FRAMEWORK_CONF = (_FRAMEWORK_CONF = {}, _defineProperty(_FRAMEWORK_CONF, FRAMEWORK_TYPE$1.ANGULAR, {
  TEMPLATE_TYPE: ANGULAR_TEMPLATE_TYPE,
  TEMPLATE_LIST: Object.values(ANGULAR_TEMPLATE_TYPE)
}), _defineProperty(_FRAMEWORK_CONF, FRAMEWORK_TYPE$1.VUE, {
  TEMPLATE_TYPE: VUE_TEMPLATE_TYPE,
  TEMPLATE_LIST: Object.values(VUE_TEMPLATE_TYPE)
}), _FRAMEWORK_CONF);

var resolveYqgResource = function resolveYqgResource() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return path.resolve.apply(void 0, [__dirname, './yqg-resource'].concat(args));
};
var resolveGeneratorTemplate = function resolveGeneratorTemplate() {
  for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
    args[_key4] = arguments[_key4];
  }
  return resolveYqgResource.apply(void 0, ['./generator/template'].concat(args));
};
var PWD = process.cwd();

var colored = function colored(chalkMethod) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return args.map(function (obj) {
    return typeof obj === 'string' ? chalkMethod(obj) : obj;
  });
};
var timeFormat = function timeFormat(time) {
  return time.toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, '$1');
};
var timePrefix = function timePrefix() {
  var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
  return chalk.yellow("[".concat(timeFormat(time), "][").concat(signature, "]"));
};
var timeInfoMap = {};
var logger = {
  info: function info() {
    var _console;
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }
    (_console = console).log.apply(_console, [timePrefix()].concat(args));
  },
  error: function error() {
    var _console2;
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    (_console2 = console).error.apply(_console2, [timePrefix()].concat(_toConsumableArray(colored.apply(void 0, [chalk.red].concat(args)))));
  },
  success: function success() {
    var _console3;
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }
    (_console3 = console).error.apply(_console3, [timePrefix()].concat(_toConsumableArray(colored.apply(void 0, [chalk.green].concat(args)))));
  },
  strong: function strong() {
    var _console4;
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }
    (_console4 = console).error.apply(_console4, [timePrefix()].concat(_toConsumableArray(colored.apply(void 0, [chalk.bgGreen].concat(args)))));
  },
  time: function time(tag) {
    if (!tag) throw new Error('Tag can not be empty!');
    timeInfoMap[tag] = {
      timeStarted: Date.now()
    };
    for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
      args[_key6 - 1] = arguments[_key6];
    }
    logger.info.apply(logger, ["Starting '".concat(tag, "' ...")].concat(args));
  },
  timeEnd: function timeEnd(tag) {
    if (!tag) throw new Error('Tag can not be empty!');
    var timeInfo = timeInfoMap[tag];
    if (!timeInfo) throw new Error("logger.time(".concat(tag, ") has not been invoked yet."));
    var millis = Date.now() - timeInfo.timeStarted;
    delete timeInfoMap[tag];
    for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {
      args[_key7 - 1] = arguments[_key7];
    }
    logger.info.apply(logger, ["Finished '".concat(tag, "' after ").concat(millis, " ms")].concat(args));
  }
};

function genFiles (_ref) {
  var srcPath = _ref.srcPath,
      destPath = _ref.destPath,
      renderData = _ref.renderData;
  var capName = renderData.capName,
      camelName = renderData.camelName,
      hyphenName = renderData.hyphenName;
  return new Promise(function (resolvePromise) {
    return gulp.src(srcPath).pipe(template(renderData)).pipe(rename(function (path$$1) {
      path$$1.extname = path.extname(path$$1.basename);
      path$$1.basename = path.basename(path$$1.basename, path$$1.extname).replace('capName', capName).replace('camelName', camelName).replace('hyphenName', hyphenName);
      console.log("Generating ".concat(path.resolve(destPath, path$$1.dirname), "/").concat(chalk.green(path$$1.basename + path$$1.extname)));
    })).pipe(gulp.dest(destPath)).on('end', resolvePromise);
  });
}

function getAuthorInfo () {
  return _ref.apply(this, arguments);
}
function _ref() {
  _ref = _asyncToGenerator(
  _regeneratorRuntime.mark(function _callee() {
    var _gitUserInfo, username, email;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _gitUserInfo = gitUserInfo(), username = _gitUserInfo.name, email = _gitUserInfo.email;
            return _context.abrupt("return", {
              username: username,
              email: email
            });
          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _ref.apply(this, arguments);
}

function handleName (name, dest) {
  if (!name) {
    throw new Error('名称不能为空');
  }
  var hyphenName = strman.toKebabCase(name);
  var camelName = strman.toCamelCase(name);
  var capName = camelName.charAt(0).toUpperCase() + camelName.slice(1);
  var hyphenFullName = hyphenName;
  var camelFullName = camelName;
  var capFullName = capName;
  if (dest) {
    var REG_EXP = /yqd_web_admin\/projects\/(.+)\/src\/fe\/page\/(.+)/;
    var result = REG_EXP.exec(dest);
    if (result) {
      var fullNameArr = result[2].split('/');
      fullNameArr.push(hyphenName);
      if (fullNameArr[0].indexOf('yqg') !== 0 && fullNameArr[0].indexOf('hx') !== 0) {
        fullNameArr.unshift('yqg');
      }
      hyphenFullName = fullNameArr.join('-');
      camelFullName = strman.toCamelCase(hyphenFullName);
      capFullName = camelFullName.charAt(0).toUpperCase() + camelFullName.slice(1);
    }
  }
  var hyphenShortName = hyphenName.replace(/yqg-/g, '');
  return {
    capName: capName,
    camelName: camelName,
    hyphenName: hyphenName,
    capFullName: capFullName,
    camelFullName: camelFullName,
    hyphenFullName: hyphenFullName,
    hyphenShortName: hyphenShortName
  };
}

var BaseGenerator =
function () {
  function BaseGenerator(_ref) {
    var framework = _ref.framework,
        type = _ref.type,
        name = _ref.name,
        dest = _ref.dest;
    _classCallCheck(this, BaseGenerator);
    Object.assign(this, {
      framework: framework,
      type: type,
      name: name,
      dest: dest
    });
  }
  _createClass(BaseGenerator, [{
    key: "getCommonRenderData",
    value: function () {
      var _getCommonRenderData = _asyncToGenerator(
      _regeneratorRuntime.mark(function _callee() {
        var timeCreated, name, dest, nameInfo, authorInfo;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                timeCreated = moment(Date.now()).format('YYYY-MM-DD HH:mm:ss.SSS');
                name = this.name, dest = this.dest;
                nameInfo = handleName(name, dest);
                _context.next = 5;
                return getAuthorInfo();
              case 5:
                authorInfo = _context.sent;
                return _context.abrupt("return", _objectSpread({
                  signature: signature,
                  timeCreated: timeCreated
                }, authorInfo, nameInfo));
              case 7:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      return function getCommonRenderData() {
        return _getCommonRenderData.apply(this, arguments);
      };
    }()
  }, {
    key: "getExtraRenderData",
    value: function () {
      var _getExtraRenderData = _asyncToGenerator(
      _regeneratorRuntime.mark(function _callee2(commonRenderData) {
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                return _context2.abrupt("return", {});
              case 1:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      return function getExtraRenderData(_x) {
        return _getExtraRenderData.apply(this, arguments);
      };
    }()
  }, {
    key: "getTemplateList",
    value: function () {
      var _getTemplateList = _asyncToGenerator(
      _regeneratorRuntime.mark(function _callee3(renderData) {
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                return _context3.abrupt("return", []);
              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));
      return function getTemplateList(_x2) {
        return _getTemplateList.apply(this, arguments);
      };
    }()
  }, {
    key: "exec",
    value: function () {
      var _exec = _asyncToGenerator(
      _regeneratorRuntime.mark(function _callee4() {
        var commonRenderData, extraRenderData, renderData, templateList;
        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.getCommonRenderData();
              case 2:
                commonRenderData = _context4.sent;
                _context4.next = 5;
                return this.getExtraRenderData(commonRenderData);
              case 5:
                extraRenderData = _context4.sent;
                renderData = _objectSpread({}, commonRenderData, extraRenderData);
                _context4.next = 9;
                return this.getTemplateList(renderData);
              case 9:
                templateList = _context4.sent;
                logger.time('Generating');
                _context4.next = 13;
                return Promise.all(templateList.map(function (_ref2) {
                  var srcPath = _ref2.srcPath,
                      destPath = _ref2.destPath;
                  return genFiles({
                    srcPath: srcPath,
                    destPath: destPath,
                    renderData: renderData
                  });
                }));
              case 13:
                logger.timeEnd('Generating');
                _context4.next = 16;
                return this.onFinish(renderData);
              case 16:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));
      return function exec() {
        return _exec.apply(this, arguments);
      };
    }()
  }, {
    key: "onFinish",
    value: function () {
      var _onFinish = _asyncToGenerator(
      _regeneratorRuntime.mark(function _callee5(renderData) {
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));
      return function onFinish(_x3) {
        return _onFinish.apply(this, arguments);
      };
    }()
  }]);
  return BaseGenerator;
}();

var SUB_PROJECT_REG = /yqd_web_admin\/projects\/([A-Za-z0-9-]+)\/src/;
var AngularGenerator =
function (_BaseGenerator) {
  function AngularGenerator() {
    _classCallCheck(this, AngularGenerator);
    return _possibleConstructorReturn(this, _getPrototypeOf(AngularGenerator).apply(this, arguments));
  }
  _createClass(AngularGenerator, [{
    key: "getExtraRenderData",
    value: function () {
      var _getExtraRenderData = _asyncToGenerator(
      _regeneratorRuntime.mark(function _callee() {
        var dest, result, appName, _ref, promptAppName;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                dest = this.dest;
                result = SUB_PROJECT_REG.exec(dest);
                if (!result) {
                  _context.next = 6;
                  break;
                }
                appName = result[1];
                _context.next = 11;
                break;
              case 6:
                _context.next = 8;
                return prompt$1({
                  promptAppName: {
                    description: 'Enter project name',
                    required: true
                  }
                });
              case 8:
                _ref = _context.sent;
                promptAppName = _ref.promptAppName;
                appName = promptAppName;
              case 11:
                return _context.abrupt("return", {
                  appName: strman.toCamelCase(appName)
                });
              case 12:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      return function getExtraRenderData() {
        return _getExtraRenderData.apply(this, arguments);
      };
    }()
  }, {
    key: "getTemplateList",
    value: function () {
      var _getTemplateList = _asyncToGenerator(
      _regeneratorRuntime.mark(function _callee2(renderData) {
        var type, dest, templateList, srcPath, destPath;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                type = this.type, dest = this.dest;
                templateList = [];
                srcPath = resolveGeneratorTemplate("./angular/".concat(type, "/**/*.**"));
                destPath = path.resolve(dest, renderData.hyphenName);
                templateList.push({
                  srcPath: srcPath,
                  destPath: destPath
                });
                return _context2.abrupt("return", templateList);
              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      return function getTemplateList(_x) {
        return _getTemplateList.apply(this, arguments);
      };
    }()
  }]);
  _inherits(AngularGenerator, _BaseGenerator);
  return AngularGenerator;
}(BaseGenerator);

var AngularComponentGenerator =
function (_AngularGenerator) {
  function AngularComponentGenerator() {
    _classCallCheck(this, AngularComponentGenerator);
    return _possibleConstructorReturn(this, _getPrototypeOf(AngularComponentGenerator).apply(this, arguments));
  }
  _createClass(AngularComponentGenerator, [{
    key: "getExtraRenderData",
    value: function () {
      var _getExtraRenderData = _asyncToGenerator(
      _regeneratorRuntime.mark(function _callee(commonRenderData) {
        var extraRenderData, _ref, hasResource;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _get(_getPrototypeOf(AngularComponentGenerator.prototype), "getExtraRenderData", this).call(this, commonRenderData);
              case 2:
                extraRenderData = _context.sent;
                _context.next = 5;
                return prompt$1({
                  hasResource: {
                    description: '是否需要.resource.js文件？(t/f)',
                    message: '请输入t或者f',
                    type: 'boolean',
                    default: 'f',
                    required: true
                  }
                });
              case 5:
                _ref = _context.sent;
                hasResource = _ref.hasResource;
                Object.assign(extraRenderData, {
                  hasResource: hasResource
                });
                return _context.abrupt("return", extraRenderData);
              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      return function getExtraRenderData(_x) {
        return _getExtraRenderData.apply(this, arguments);
      };
    }()
  }, {
    key: "getTemplateList",
    value: function () {
      var _getTemplateList = _asyncToGenerator(
      _regeneratorRuntime.mark(function _callee2(renderData) {
        var templateList, dest, srcPath, destPath;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _get(_getPrototypeOf(AngularComponentGenerator.prototype), "getTemplateList", this).call(this, renderData);
              case 2:
                templateList = _context2.sent;
                if (renderData.hasResource) {
                  dest = this.dest;
                  srcPath = resolveGeneratorTemplate('./angular/component.resource/**/*.**');
                  destPath = path.resolve(dest, renderData.hyphenName);
                  templateList.push({
                    srcPath: srcPath,
                    destPath: destPath
                  });
                }
                return _context2.abrupt("return", templateList);
              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      return function getTemplateList(_x2) {
        return _getTemplateList.apply(this, arguments);
      };
    }()
  }]);
  _inherits(AngularComponentGenerator, _AngularGenerator);
  return AngularComponentGenerator;
}(AngularGenerator);

var VueGenerator =
function (_BaseGenerator) {
  function VueGenerator() {
    _classCallCheck(this, VueGenerator);
    return _possibleConstructorReturn(this, _getPrototypeOf(VueGenerator).apply(this, arguments));
  }
  _createClass(VueGenerator, [{
    key: "getTemplateList",
    value: function () {
      var _getTemplateList = _asyncToGenerator(
      _regeneratorRuntime.mark(function _callee(renderData) {
        var type, dest, templateList, srcPath, destPath;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                type = this.type, dest = this.dest;
                templateList = [];
                srcPath = resolveGeneratorTemplate("./vue/".concat(type, "/**/*.**"));
                destPath = path.resolve(dest, renderData.hyphenName);
                templateList.push({
                  srcPath: srcPath,
                  destPath: destPath
                });
                return _context.abrupt("return", templateList);
              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      return function getTemplateList(_x) {
        return _getTemplateList.apply(this, arguments);
      };
    }()
  }]);
  _inherits(VueGenerator, _BaseGenerator);
  return VueGenerator;
}(BaseGenerator);

function handlePort(port) {
  var digitalPort = parseInt(port, 10);
  if (Number.isNaN(digitalPort)) {
    throw new Error('Port should be parsed into number!');
  }
  return {
    port: "".concat(digitalPort)
  };
}
var VueProjectGenerator =
function (_VueGenerator) {
  function VueProjectGenerator() {
    _classCallCheck(this, VueProjectGenerator);
    return _possibleConstructorReturn(this, _getPrototypeOf(VueProjectGenerator).apply(this, arguments));
  }
  _createClass(VueProjectGenerator, [{
    key: "getExtraRenderData",
    value: function () {
      var _getExtraRenderData = _asyncToGenerator(
      _regeneratorRuntime.mark(function _callee(commonRenderData) {
        var extraRenderData, _ref, port;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _get(_getPrototypeOf(VueProjectGenerator.prototype), "getExtraRenderData", this).call(this, commonRenderData);
              case 2:
                extraRenderData = _context.sent;
                _context.next = 5;
                return prompt$1({
                  port: {
                    description: 'Enter default port',
                    message: 'Port should not be empty!',
                    pattern: /^\d+$/,
                    required: true
                  }
                });
              case 5:
                _ref = _context.sent;
                port = _ref.port;
                Object.assign(extraRenderData, handlePort(port));
                return _context.abrupt("return", extraRenderData);
              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      return function getExtraRenderData(_x) {
        return _getExtraRenderData.apply(this, arguments);
      };
    }()
  }, {
    key: "onFinish",
    value: function () {
      var _onFinish = _asyncToGenerator(
      _regeneratorRuntime.mark(function _callee2(renderData) {
        var dest;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                dest = "".concat(this.dest, "/").concat(renderData.hyphenName);
                console.log("\n\n\u8BF7\u5230 ".concat(chalk.yellow(dest), " \u76EE\u5F55\u521B\u5EFA node_modules \u8F6F\u94FE\u63A5\uFF0C\u5E76\u6DFB\u52A0\u5230 git \u4E2D.\n\n"));
              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      return function onFinish(_x2) {
        return _onFinish.apply(this, arguments);
      };
    }()
  }]);
  _inherits(VueProjectGenerator, _VueGenerator);
  return VueProjectGenerator;
}(VueGenerator);

var VueProjectUserGenerator =
function (_VueGenerator) {
  function VueProjectUserGenerator() {
    _classCallCheck(this, VueProjectUserGenerator);
    return _possibleConstructorReturn(this, _getPrototypeOf(VueProjectUserGenerator).apply(this, arguments));
  }
  _createClass(VueProjectUserGenerator, [{
    key: "getExtraRenderData",
    value: function () {
      var _getExtraRenderData = _asyncToGenerator(
      _regeneratorRuntime.mark(function _callee(commonRenderData) {
        var extraRenderData, _ref, port;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return _get(_getPrototypeOf(VueProjectUserGenerator.prototype), "getExtraRenderData", this).call(this, commonRenderData);
              case 2:
                extraRenderData = _context.sent;
                _context.next = 5;
                return prompt$1({
                  port: {
                    description: 'Enter default port',
                    message: 'Port should not be empty!',
                    pattern: /^\d+$/,
                    required: true
                  }
                });
              case 5:
                _ref = _context.sent;
                port = _ref.port;
                Object.assign(extraRenderData, {
                  port: port
                });
                return _context.abrupt("return", extraRenderData);
              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      return function getExtraRenderData(_x) {
        return _getExtraRenderData.apply(this, arguments);
      };
    }()
  }, {
    key: "onFinish",
    value: function () {
      var _onFinish = _asyncToGenerator(
      _regeneratorRuntime.mark(function _callee2(renderData) {
        var hyphenName, port, defaultConfig;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                hyphenName = renderData.hyphenName, port = renderData.port;
                defaultConfig = "'".concat(hyphenName, "': {port: ").concat(port, ", apiHost: 'https://'}");
                console.log("Project ".concat(hyphenName, " was generated successfully. Please add blow text to proper file."));
                console.log("\n- config/default.js\n  ".concat(defaultConfig));
                console.log("\n- gulp.babel.js\n  addYqgVueSPA('".concat(hyphenName, "');"));
                _context2.next = 7;
                return _get(_getPrototypeOf(VueProjectUserGenerator.prototype), "onFinish", this).call(this, renderData);
              case 7:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      return function onFinish(_x2) {
        return _onFinish.apply(this, arguments);
      };
    }()
  }]);
  _inherits(VueProjectUserGenerator, _VueGenerator);
  return VueProjectUserGenerator;
}(VueGenerator);

var _FRAMEWORK_TYPE$ANGUL, _FRAMEWORK_TYPE$VUE, _GENERATOR_CONF;
var GENERATOR_CONF = (_GENERATOR_CONF = {}, _defineProperty(_GENERATOR_CONF, FRAMEWORK_TYPE$1.ANGULAR, (_FRAMEWORK_TYPE$ANGUL = {}, _defineProperty(_FRAMEWORK_TYPE$ANGUL, ANGULAR_TEMPLATE_TYPE.COMPONENT, AngularComponentGenerator), _defineProperty(_FRAMEWORK_TYPE$ANGUL, "default", AngularGenerator), _FRAMEWORK_TYPE$ANGUL)), _defineProperty(_GENERATOR_CONF, FRAMEWORK_TYPE$1.VUE, (_FRAMEWORK_TYPE$VUE = {}, _defineProperty(_FRAMEWORK_TYPE$VUE, VUE_TEMPLATE_TYPE.PROJECT, VueProjectGenerator), _defineProperty(_FRAMEWORK_TYPE$VUE, VUE_TEMPLATE_TYPE.PROJECT_USER, VueProjectUserGenerator), _defineProperty(_FRAMEWORK_TYPE$VUE, "default", VueGenerator), _FRAMEWORK_TYPE$VUE)), _GENERATOR_CONF);
var generator = (function () {
  var _ref2 = _asyncToGenerator(
  _regeneratorRuntime.mark(function _callee(_ref) {
    var framework, CONF, TEMPLATE_LIST, templateListText, _ref3, typeIndex, type, _ref4, name, dest, GENERATOR_MAP, Generator, generator;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            framework = _ref.framework;
            CONF = FRAMEWORK_CONF[framework];
            if (CONF) {
              _context.next = 5;
              break;
            }
            console.log(chalk.red("Unknown framework: ".concat(framework)));
            return _context.abrupt("return");
          case 5:
            TEMPLATE_LIST = CONF.TEMPLATE_LIST;
            templateListText = TEMPLATE_LIST.map(function (templateName, index) {
              return "".concat(chalk.yellow(index + 1), ". ").concat(chalk.green(templateName));
            }).join('\n');
            _context.next = 9;
            return prompt$1({
              typeIndex: {
                description: "\n".concat(templateListText, "\nSelect a template\uFF08Enter a number or name\uFF09"),
                default: '1',
                required: true
              }
            });
          case 9:
            _ref3 = _context.sent;
            typeIndex = _ref3.typeIndex;
            type = TEMPLATE_LIST.includes(typeIndex) ? typeIndex : TEMPLATE_LIST[typeIndex - 1];
            if (type) {
              _context.next = 15;
              break;
            }
            console.log(chalk.red("Unknown type: ".concat(type)));
            return _context.abrupt("return");
          case 15:
            _context.next = 17;
            return prompt$1({
              name: {
                description: 'Enter target name [such as foo-bar]',
                message: 'Target name should not be empty!',
                type: 'string',
                required: true
              },
              dest: {
                description: 'Enter dest path',
                type: 'string',
                default: process.cwd(),
                required: true
              }
            });
          case 17:
            _ref4 = _context.sent;
            name = _ref4.name;
            dest = _ref4.dest;
            console.log(chalk.grey("Will generate ".concat(framework, " ").concat(type, " ").concat(name, " at ").concat(dest)));
            GENERATOR_MAP = GENERATOR_CONF[framework];
            Generator = GENERATOR_MAP[type] || GENERATOR_MAP.default;
            generator = new Generator({
              framework: framework,
              type: type,
              name: name,
              dest: dest
            });
            generator.exec();
          case 25:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return function (_x) {
    return _ref2.apply(this, arguments);
  };
})();

var NPM_PREFIX = prefix;
var isGlobalInstall = function isGlobalInstall() {
  return process.argv.some(function (arg, index) {
    return !index && arg.startsWith('yqg') || arg.startsWith(NPM_PREFIX) && !arg.endsWith('node');
  });
};
var IS_GLOBAL_INSTALL = isGlobalInstall();

var LOG_TAG = 'check-version';
var checkVersion = (function () {
  return new Promise(function (resolve, reject) {
    logger.info("DEBUG=".concat(DEBUG, " STAT=").concat(STAT, " NODE_ENV=").concat(NODE_ENV, " prefix=").concat(NPM_PREFIX, " isGlobal=").concat(IS_GLOBAL_INSTALL));
    if (VERSION_CHECK_DISABLE || !IS_GLOBAL_INSTALL) {
      resolve();
      return;
    }
    var lastTimeUpdated = 0;
    var filePath = expandTilde(VERSION_FILE_PATH);
    if (fs.existsSync(filePath)) {
      lastTimeUpdated = +fs.readFileSync(filePath).toString() || 0;
    }
    var now = Date.now();
    if (now - lastTimeUpdated < VERSION_CHECK_PERIOD) {
      resolve();
      return;
    }
    logger.time(LOG_TAG);
    getPackageInfo(name).then(function (_ref) {
      var latestVersion = _ref.version;
      if (semver.gt(latestVersion, version)) {
        logger.strong("Please run 'npm i -g ".concat(name, "@").concat(latestVersion, "' to update your yqg-cli."));
      } else if (semver.lt(latestVersion, version)) {
        logger.error("npm latest version ".concat(latestVersion, " is less than local version ").concat(version, "."));
      } else {
        logger.success('Congratulations! Your yqg-cli is the latest!');
        fs.writeFileSync(filePath, now);
      }
      logger.timeEnd(LOG_TAG);
      resolve();
    }, reject);
  });
});

/**
 * @author panezhang
 * @date 08/02/2018-13:24
 * @file setup
 */
process.on('uncaughtException', function (err) {
  console.log(); // 换行

  if (DEBUG) {
    console.log('uncaughtException', err);
  } else {
    console.log('异常退出');
  }

  process.exit(1);
});
process.on('unhandledRejection', function (err, promise) {
  console.log(); // 换行

  if (DEBUG) {
    console.log('unhandledRejection', err, promise);
  } else {
    console.log('已退出');
  }

  process.exit(1);
});
var setup = (function () {
  return Promise.all([checkVersion()]);
});

/**
 * @author panezhang
 * @date 28/12/2017-19:19
 * @file yqg-angular
 */
setup().then(function () {
  return generator({
    framework: 'angular'
  });
});
